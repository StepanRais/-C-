#include <iostream>
#include <cmath>


using namespace std;

class point {
private:
    double x, y;
public:
    point() {
        x = 0;
        y = 0;
    }
    point(double nx, double ny) {
        x = nx;
        y = ny;
    }
    double getX() {
        return x;
    }
    double getY() {
        return y;
    }
    void setX(double nx) {
        x = nx;
    }
    void setY(double ny) {
        y = ny;
    }
    void printPoint() {
        cout << "(" << x << "," << y << ")";
    }
};

class segment {
private:
    point* P1, * P2;
public:
    segment() {
        P1 = new point;
        P2 = new point;
    }
    segment(double x1, double y1, double x2, double y2) {
        P1 = new point(x1, y1);
        P2 = new point(x2, y2);
    }
    ~segment() {
        delete P1;
        delete P2;
    }

    double length() {
        return sqrt(pow(P1->getX() - P2->getX(), 2) + pow(P1->getY() - P2->getY(), 2));
    }
    point* getFirstPoint() {
        point* tmp = new point(P1->getX(), P1->getY());
        return tmp;
    }
    point* getSecondPoint() {
        point* tmp = new point(P2->getX(), P2->getY());
        return tmp;
    }

    void print() {

    }

    point* getMeedle() {
        point* tmp = new point((P1->getX() + P2->getX()) / 2, (P1->getY() + P2->getY()) / 2);
    }

    bool pointOnLine(point* P) {
        double m, n, m1, n1;
        m = P1->getX() - P2->getX();
        n = P1->getY() - P2->getY();
        m1 = P1->getX() - P->getX();
        n1 = P1->getY() - P->getY();
        return (m / m1) == (n / n1);
    }

    bool pointBelongs(point* P) {

    }


};

bool isPerpendicular(segment* A, *B) {

}

bool isPapallel(segment* A, *B) {

}

bool isCros(segment* A, *B) {

}

point* getCrosPoint(segment* A, *B) {

}


int main()
{
    point P;
    P.printPoint();
    point P2(4, 6);
    P2.printPoint();
    cout << endl;
    segment* AB = new segment(2, 2, 5, 5);
    cout << AB->length();

    point* AB1 = AB->getFirstPoint();
    cout << endl;
    AB1->printPoint();



    return 0;
}
